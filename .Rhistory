system(copy)
convert <- paste("cd ",paste(folder_path, "AtlantisMSY", forcing_folder, sep = "/"), "/", "\n", "flip -uv *", sep = "") #convert windows text files into Linux text files.
system(convert)
}
}
}
library(atlantisfmsy)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6342/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
getwd()
library(atlantisfmsy)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
func_grp
folder_path
model_path
exe_name
fmax
last_run = NULL
# Check os used.
os <- Sys.info()['sysname']
if(!os %in% c("Windows","Linux"))
stop("This script is not developped to work on iOS. Several modifications are required to copy files and directories, and run Atlantis.")
# Check if functional group on in calibrated model.
if(atlantis_fgrpon(func_grp, model_path, exe_name) == 0)
stop(paste("The functional group ", func_grp, " is turned off in the calibrated model.", sep = ""))
# test if simulations for func_grp already exist.
if(!file.path(folder_path, "AtlantisMSY", func_grp) %in% list.dirs(file.path(folder_path, "AtlantisMSY"), recursive = F))
stop(paste("You have never run this script for the functional group ", func_grp, ". Use the atlantisfmsy_simu function.", sep = ""))
# test if last_run parameter is well specified if specified.
if(!is.null(last_run)) {
test <- stringr::str_split_fixed(last_run, "_", n = 3)
if(test[1] != "MSY" | test[2] != func_grp | substring(test[3], 1, 1) != "F" | grepl("[^0-9]", substring(test[3], 2, 4)) | substring(test[3], 5, 7) != ".nc")
stop(paste(last_run, " is not well specified. It should be of the form MSY_", func_grp, "_F[1-9][1-9][1-9].nc. Please change last_run parameter to match the value in your batch/shell file or in your output folder.", sep = ""))
rm(test)
}
simu_path <- file.path(folder_path, "AtlantisMSY", func_grp)
# path forcing parameters file.
infilename <- atlantis_paraselect(simu_path, exe_name, "-r")
# Extract running time from previous run.
para <- atlantis_openfile(simu_path, infilename, "tstop")
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
run_time <- as.numeric(line_para[grep("[0-9]+", line_para)[1]])
burnin_time <- run_time - (30 * 365) # burn in time + 30 extra years, average catch will be calculated on the 5 last years.
# set run parameters file to rewrite previous unfinished simulation if already exist.
para <- atlantis_openfile(simu_path, infilename, "flagreusefile")
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
line_para[grep("[0-9]+", line_para)[1]] <- "2" # replace output files.
params[idxline] <- paste(as.character(line_para), collapse = " ")
write(params, file.path(simu_path, infilename))
# search for the output directory in bach file.
output_path <- unlist(strsplit(atlantis_paraselect(simu_path, exe_name, "-o"), "/"))
output_path <- output_path[-length(output_path)]
output_path <- paste(simu_path, output_path, sep = "/")
if(is.null(last_run)){
output_files <- atlantis_lastsimu(output_path)[[1]]
fmin <- atlantis_lastsimu(output_path)[[2]]
} else {
output_files <- atlantis_lastsimu(output_path, last_run)[[1]]
fmin <- atlantis_lastsimu(output_path, last_run)[[2]]
}
"Fnext_simu.txt" %in% output_files
restart
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
model_path
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
library(atlantisfmsy)
folder_path <- "D:/"
model_path <- "C:/Users/rgirardi/Dropbox/AEEC_F"
exe_name <- "atlantismain"
burnin_time <- 30 * 365
fmax <- 4
AEEC_Species <- c("BIV","BSS", "CEP")
dir.exists(file.path("D:/AtlantisMSY",AEEC_Species))
library(atlantisfmsy)
library(atlantisfmsy)
library(atlantisfmsy)
folder_path <- "C:/Users/rgirardi/Desktop"
model_path <- "C:/Users/rgirardi/Dropbox/AEEC_F"
exe_name <- "atlantismain"
fmax <- 4
AEEC_code <-"BSS"
atlantisfmsy_simu(AEEC_code, folder_path, model_path, exe_name, burnin_time, fmax)
atlantisfmsy_restart(AEEC_code, folder_path, model_path, exe_name, fmax)
install.packages("ggplot2")
library(atlantisfmsy)
library(atlantisfmsy)
library(atlantisfmsy)
Sys.info()['sysname']
output_path = NULL
is.null(output_path)
path <- "C:/Atlantis/AtlantisEEC/AtlantisMSY/COD"
pathconvert(path)
pathconvert <- function(path){
if(Sys.info()['sysname'] == "Windows" & !is.null(path)) path <- utils::shortPathName(path)
return(path)
}
pathconvert(path)
# convert path on Windows to avoid issues with space in path
path <- pathconvert(path)
path
pathconvert(path)
path <- "C:/Atlantis/AtlantisEEC/AtlantisMSY/the COD"
pathconvert(path)
path <- "C:/Atlantis/AtlantisEEC/AtlantisMSY/'the COD'"
pathconvert(path)
pathconvert("C:\Users\rgirardi\Documents\Groupe trophique")
pathconvert("C:/Users/rgirardi/Documents/Groupe trophique")
pathconvert(NULL)
shortPathName(NULL)
library(atlantisfmsy)
10950/30
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
devtools::install_github("rgirardi/atlantisfmsy", build_vignettes = T)
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
devtools::install_github("rgirardi/atlantisfmsy", build_vignettes = T)
library(atlantisfmsy)
path <- "C:/Users/rgirardi/Dropbox/AEEC_Fv6290"
exe_name <- "atlantismain"
index <- "-h"
atlantis_paraselect(path, exe_name, index)
atlantis_paraselect(path, exe_name, index, batch_file)
batch_file <- "runAtlantis"
atlantis_paraselect(path, exe_name, index, batch_file)
batch_file <- "runAtlantis.bat"
atlantis_paraselect(path, exe_name, index, batch_file)
atlantis_paraselect(path, exe_name, "-o", batch_file)
atlantis_paraselect(path, exe_name, "-o"
)
list.files(path)[regexpr(".bat", list.files(path), fixed = T) != -1]
atlantis_paraselect(path, exe_name, "-o", batch_file)
atlantis_paraselect(model_path, exe_name, "-r", batch_file)
model_path <- path
atlantis_paraselect(model_path, exe_name, "-r", batch_file)
rep(0, 3)
c(0, 0, 0)
atlantis_paraselect(path, exe_name, "-q", batch_file)
atlantis_paraselect(path, exe_name, "-q", batch_file)
atlantis_paraselect(path, exe_name, "-s", batch_file)
batch_file
atlantis_paraselect(path, exe_name, "-s", batch_file)
atlantis_paraselect(path, exe_name, "-o", batch_file)
atlantis_paraselect(path, exe_name, "-r", batch_file)
atlantis_paraselect(path, exe_name, "-r", batch_file)
atlantis_paraselect(model_path, exe_name, "-r", batch_file)
atlantis_paraselect(model_path, exe_name, "-s", batch_file)
atlantis_paraselect(model_path, exe_name, "-h", batch_file)
atlantis_paraselect(simu_path, exe_name, "-o", batch_file)
simu_path <- path
atlantis_paraselect(simu_path, exe_name, "-o", batch_file)
atlantis_paraselect(simu_path, exe_name, "-o", batch_file)
atlantis_paraselect(model_path, exe_name, "-f", batch_file)
atlantis_paraselect(simu_path, exe_name, "-r", batch_file)
atlantis_paraselect(simu_path, exe_name, "-o", batch_file)
atlantis_paraselect(simu_path, exe_name, "-r", batch_file)
atlantis_paraselect(simu_path, exe_name, "-r", batch_file)
# look for open fleets and and check if they are using fishing mortality as proxy of fishing pressure
harvest_filename <- atlantis_paraselect(model_path, exe_name, "-h", batch_file) #looking for harvest parameters file.
harvest_filename
atlantis_fleetopen(model_path, exe_name, harvest_filename, run_time, batch_file)
library(atlantisfmsy)
atlantis_fleetopen(model_path, exe_name, harvest_filename, run_time, batch_file)
atlantis_fleetopen
atlantis_fleetopen
atlantis_fleetopen = function(path, exe_name, harvest_filename, run_time, batch_file = NULL) {
#open harvest file.
para <- atlantis_openfile(path, harvest_filename, "_tStart")
params <- para[[1]]
idxline <- para[[2]]
infilename <- atlantis_paraselect(path, exe_name, "-q", batch_file) #looking for fishing parameters csv file.
fishing_para <- utils::read.table(file.path(path, infilename), sep = ",", header = T)
names(fishing_para) <- tolower(names(fishing_para))
fleet_tstart <- stringr::str_split_fixed(params[idxline], "[:space:]", 2)
fleet_tstart <- gsub("\\t", "", fleet_tstart)
fleet_tstart <- data.frame(code = gsub("_tStart", "",fleet_tstart[, 1]), active_flt = do.call(rbind, qdapRegex::ex_number(fleet_tstart[, 2]))[, 1])
fleet_tstart$active_flt <- as.numeric(as.character(fleet_tstart$active_flt))
fleet_tstart$active_flt[fleet_tstart$active_flt <= run_time] <- 1 #if starting day is smaller than the run_time the fleet is considered open.
fleet_tstart$active_flt[fleet_tstart$active_flt > run_time] <- 0
fishing_para <- merge(fishing_para, fleet_tstart)
fishing_para <- fishing_para[order(fishing_para$index), ]
gc()
return(fishing_para)
}
atlantis_fleetopen
install.packages("qdapRegex")
install.packages("stringr")
utils:tails
utils::tail
tail
library(atlantisfmsy)
atlantis_fleetopen
atlantis_fleetopen
library(atlantisfmsy)
atlantis_checkmodule
library(devtools)
library(atlantisfmsy)
atlantis_checkmodule
library(atlantisfmsy)
library(atlantisfmsy)
atlantisfmsy_fmaxcatch
library(atlantisfmsy)
atlantisfmsy_fmaxcatch = function(func_grp, path, exe_name, run_time, fmax, batch_file = NULL) {
if (fmax >= 10) stop("You need to modify the code to use F higher than or equal to 10: problem with Atlantis output names")
fyield <- data.frame(sp = NA, f = NA, yield = NA)
output_path <- unlist(strsplit(atlantis_paraselect(path, exe_name, "-o", batch_file), "/"))  #search for the output directory in bach file.
output_path <- file.path(path, output_path[-length(output_path)])
files_name <- list.files(output_path, full.names = T)[regexpr("TOTCATCH.nc", list.files(output_path, full.names = T), fixed = T) != -1 & regexpr("MSY", list.files(output_path), fixed = T) != -1] #list of catch output files from Atlantis previous simulations.
# setwd(paste(path, output_path, sep = "/"))
i <- 1
for (f in 1:length(files_name)) {
catch.nc <- ncdf4::nc_open(files_name[f])
time <- round(catch.nc$dim$t$vals / (3600 * 24), 0) #in days.
catch <- ncdf4::ncvar_get(catch.nc, paste("Tot_", func_grp, "_Catch", sep = ""))  #extract total catch for the functional group considered.
if (max(time) == run_time) {
catch_tot <- mean(apply(catch[, time > (run_time - (365 * 5))], 2, sum)) #sum of total catch in each polygon + average catch of the 5 last years.
if(i == 1) {
fyield$sp <- func_grp
fyield$f <- as.numeric(substr(tail(strsplit(files_name[f], "/")[[1]], 1), 10, 12)) / 100 #F in y-1 (extract from the file name).
fyield$yield <- catch_tot  #total catch output.
} else {
fyield <- rbind(fyield, data.frame(sp = func_grp, f = as.numeric(substr(tail(strsplit(files_name[f], "/")[[1]], 1), 10, 12)) / 100, yield = catch_tot))
}
i <- i + 1
ncdf4::nc_close(catch.nc)
}
gc()
}
utils::write.table(fyield, file.path(output_path, paste("Fmsy_", func_grp, ".txt", sep = "")), sep = ",", dec = ".", row.names = F) # yield for each F scenario already computed.
fyield_final <- stats::aggregate(fyield$yield, list(sp = fyield$sp), max) #look for the maximum yield in the set of scenarios.
names(fyield_final) <- gsub("x", "yield_max", names(fyield_final))
fyield_ini <- merge(fyield_final, fyield)
names(fyield_final) <- gsub("yield_max", "yield", names(fyield_final))
fyield_final <- merge(fyield_final, fyield, x.all = T, y.all = F)
#Dertermine the next simulation to run.
fyield_final$pos <- which(fyield_ini$yield == fyield_ini$yield_max)
fyield_final$f1 <- fyield$f[fyield_final$pos - 1]
fyield_final$f2 <- fyield$f[fyield_final$pos + 1]
fyield_final$ft1 <- round(fyield_final$f - abs(fyield_final$f1 - fyield_final$f) / 2, 2)
fyield_final$ft2 <- round(fyield_final$f + abs(fyield_final$f2 - fyield_final$f) / 2, 2)
fyield_final$ft2[fyield_final$ft2 >= fmax] <- NA
fyield_ini <- fyield_final[, c("sp", "f", "ft1", "ft2")]
fyield_ini <- fyield_ini[,!is.na(fyield_ini)]
utils::write.table(fyield_ini, file.path(output_path, "Fnext_simu.txt"), sep = ",", dec = ".", row.names = F)
gc()
}
atlantis_bachchange
atlantis_bachchange = function(func_grp, path, exe_name, f_test, batch_file = NULL, os = Sys.info()['sysname']) {
#find the Atlantis run bach/shell file.
if(is.null(batch_file)){
if (os == "Windows") {
infilename <- list.files(path)[regexpr(".bat", list.files(path), fixed = T) != -1]
} else {
infilename <- list.files(path)[regexpr(".sh", list.files(path), fixed = T) != -1]
}
} else {
infilename <- batch_file
}
para <- atlantis_openfile(path, infilename, exe_name)
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
output_name <- line_para[which(line_para == "-o") + 1]
output_name <- unlist(strsplit(output_name, "/"))
morta <- as.character(round(f_test[1] * 365, digits = 2))
morta <- gsub("[.]", "", morta)
while(nchar(morta) != 3) {
morta <- paste(morta, "0", sep = "")
}
output_name[length(output_name)] <- paste("MSY_", func_grp, "_F", morta, ".nc", sep = "")
line_para[which(line_para == "-o") + 1] <- paste(output_name, collapse = "/")
params <- paste(line_para, collapse = " ")
write(params, file.path(path, infilename))
f_test <- f_test[-1]
gc()
return(f_test)
}
atlantis_bachchange
path <- "C:/Users/rgirardi/Dropbox/AEEC_Fv6290"
func_grp <- "COD"
exe_name <- "atlantismain"
f_test <- 0.2/365
f_test
atlantis_bachchange(func_grp, path, exe_name, f_test, batch_file)
atlantis_bachchange(func_grp, path, exe_name, f_test)
batch_file <- "runAtlantis.bat"
atlantis_bachchange(func_grp, path, exe_name, f_test, batch_file)
atlantis_checkf
model_path <- path
atlantis_paraselect(model_path, exe_name, "-r", batch_file)
atlantis_checkmodule(model_path, exe_name, batch_file)
atlantis_checkmodule = function(model_path, exe_name, batch_file = NULL) {
#initialize flag check.
test <- rep(0, 3) # store the value of c("flag_fisheries_on", "flag_skip_biol", "flag_skip_phys") in Atlantis.
#looking for run parameters file.
infilename <- atlantis_paraselect(model_path, exe_name, "-r", batch_file)
#open run parameters file and check if the fishery module is on in Atlantis.
para <- atlantis_openfile(model_path, infilename, "flag_fisheries_on")
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
test[1] <- as.numeric(line_para[grep("[0-9]+", line_para)[1]])
#check if the biological module is on in Atlantis.
para <- atlantis_openfile(model_path, infilename, "flag_skip_biol")
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
test[2] <- as.numeric(line_para[grep("[0-9]+", line_para)[1]])
#check if the biological module is on in Atlantis.
para <- atlantis_openfile(model_path, infilename, "flag_skip_phys")
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
test[3] <- as.numeric(line_para[grep("[0-9]+", line_para)[1]])
# test if fishery is on, biology and physics aren't skipped in Atlantis.
if(all(test == c(1, 0, 0)) == T) {
test <- 1
} else {
test <- 0
}
gc()
return(test)
}
atlantis_checkmodule(model_path, exe_name)
atlantis_checkmodule(model_path, exe_name, batch_file)
atlantis_fleetopen = function(path, exe_name, harvest_filename, run_time, batch_file = NULL) {
#open harvest file.
para <- atlantis_openfile(path, harvest_filename, "_tStart")
params <- para[[1]]
idxline <- para[[2]]
infilename <- atlantis_paraselect(path, exe_name, "-q", batch_file) #looking for fishing parameters csv file.
fishing_para <- utils::read.table(file.path(path, infilename), sep = ",", header = T)
names(fishing_para) <- tolower(names(fishing_para))
fleet_tstart <- stringr::str_split_fixed(params[idxline], "[:space:]", 2)
fleet_tstart <- gsub("\\t", "", fleet_tstart)
fleet_tstart <- data.frame(code = gsub("_tStart", "",fleet_tstart[, 1]), active_flt = do.call(rbind, qdapRegex::ex_number(fleet_tstart[, 2]))[, 1])
fleet_tstart$active_flt <- as.numeric(as.character(fleet_tstart$active_flt))
fleet_tstart$active_flt[fleet_tstart$active_flt <= run_time] <- 1 #if starting day is smaller than the run_time the fleet is considered open.
fleet_tstart$active_flt[fleet_tstart$active_flt > run_time] <- 0
fishing_para <- merge(fishing_para, fleet_tstart)
fishing_para <- fishing_para[order(fishing_para$index), ]
gc()
return(fishing_para)
}
atlantis_fgrpon = function(func_grp, path, exe_name, batch_file = NULL) {
infilename <- atlantis_paraselect(path, exe_name, "-s", batch_file) #looking for functional groups parameter csv file.
fgrp_para <- utils::read.table(file.path(path, infilename), sep = ",", header = T)
names(fgrp_para) <- tolower(names(fgrp_para))
fgrpon <-  fgrp_para$isturned[fgrp_para$code == func_grp]
gc()
return(fgrpon)
}
atlantis_fgrpon(func_grp, path, exe_name)
atlantis_fgrpon(func_grp, path, exe_name, batch_file)
atlantis_fgrpimp = function(func_grp, path, exe_name, batch_file = NULL) {
infilename <- atlantis_paraselect(path, exe_name, "-s", batch_file) #looking for functional groups parameter csv file.
fgrp_para <- utils::read.table(file.path(path, infilename), sep = ",", header = T)
names(fgrp_para) <- tolower(names(fgrp_para))
fgrpimp <-  fgrp_para$isfished[fgrp_para$code == func_grp] * fgrp_para$isimpacted[fgrp_para$code == func_grp]
gc()
return(fgrpimp)
}
atlantis_fgrpimp(func_grp, path, exe_name, batch_file)
atlantis_fgrpimp(func_grp, path, exe_name)
atlantis_runtime
run_time <- 3650
atlantis_fgrpimp(path, exe_name, run_time)
atlantis_runtime(path, exe_name, run_time)
atlantis_runtime(path, exe_name, 7300)
atlantis_runtime(path, exe_name, 3650, batch_file)
atlantis_runtime(path, exe_name, 7300, batch_file)
atlantis_wsummary(path, exe_name)
atlantis_wsummary(path, exe_name, batch_file)
library(atlantisfmsy)
harvest_filename <- atlantis_paraselect(model_path, exe_name, "-h", batch_file) #looking for harvest parameters file.
atlantis_fleetopen(model_path, exe_name, harvest_filename, run_time)
atlantis_fleetopen(model_path, exe_name, harvest_filename, run_time, batch_file)
hist(rnorm(n=1000000,mean = 0, sd=1))
d<-hist(rnorm(n=1000000,mean = 0, sd=1))
d
plot(d$counts~d$mids)
