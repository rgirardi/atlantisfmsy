library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy")
getwd()
library(atlantisfmsy)
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
devtools::load_all(".")
library(atlantisfmsy)
library(atlantisfmsy)
library(atlantisfmsy)
install.packages("roxygen2")
library(atlantisfmsy)
library(atlantisfmsy)
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
save.out = F
output_path = NULL
os = Sys.info()['sysname']
os
exe_name <- "atlantismain"
path <- "C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1"
# path of csv functional groups settings
infilename <- atlantis_paraselect(path, exe_name, "-s")
# read functional groups settings
fgrp_para <- utils::read.table(file.path(path, infilename), sep = ",", header = T)
names(fgrp_para) <- tolower(names(fgrp_para))
# list of potential prey
prey <- as.character(fgrp_para$code)
preysed <- paste(fgrp_para$code[fgrp_para$grouptype %in% c("LAB_DET", "REF_DET", "CARRION")], "sed", sep = "")
prey <- c(prey, preysed)
# path biological parameters file.
infilename <- atlantis_paraselect(path, os, exe_name, "-b")
library(atlantisfmsy)
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
library(atlantisfmsy)
atlantis_dietextract("C:/Users/rgirardi/Dropbox/AEEC_trunk/AEEC_trunk1", "atlantismain")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy")
getwd()
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
model_path
folder_path
Sys.info()['sysname']
Sys.info()['sysname'] == "Linux"
paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "")
atlantis_paraselect(model_path, "atlantismain", "-h")
atlantis_paraselect(model_path, "atlantismain", "-s")
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s")
file.path(model_path, group_csv_file)
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T)
View(group_csv_data)
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
View(group_csv_data)
View(fgrp_para)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
View(fgrp_para)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
View(group_csv_data)
func_grp
folder_path
model_path
exe_name
burnin_time
burnin_time <- 7300 # in days
fmax <- 4 # per years
burnin_time
fmax
7300/2
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
model_path
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
copy <- paste("xcopy /e /y ", gsub("/", "\\\\", exe_path), " ", paste(gsub("/", "\\\\", model_path), "AtlantisMSY", func_grp, sep = "\\"), sep = "") #copy model information.
exe_path <- "C:/Atlantis/code/trunk_rev6342/atlantismain/Debug/atlantismain.exe" #"<your own path>"
copy <- paste("xcopy /e /y ", gsub("/", "\\\\", exe_path), " ", paste(gsub("/", "\\\\", model_path), "AtlantisMSY", func_grp, sep = "\\"), sep = "") #copy model information.
copy
copy <- paste("xcopy /e /y ", gsub("/", "\\\\", exe_path), " ", gsub("/", "\\\\", model_path), sep = "") #copy executable.
copy
shell(copy)
copy <- paste("xcopy /e /y ", gsub("/", "\\\\", exe_path), " ", paste0(gsub("/", "\\\\", model_path), "\\\\"), sep = "") #copy executable.
shell(copy)
copy <- paste("xcopy ", gsub("/", "\\\\", exe_path), " ", paste0(gsub("/", "\\\\", model_path), "\\\\"), sep = "") #copy executable.
shell(copy)
gsub("/", "\\\\", model_path)
copy <- paste("xcopy ", gsub("/", "\\\\", exe_path), " ", gsub("Program Files", '"Program Files"', gsub("/", "\\\\", model_path)), sep = "") #copy executable.
shell(copy)
model_path
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
shortPathName("C:/Program Files (x86)/Adobe/")
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6342/atlantismain/Debug/atlantismain.exe" #"<your own path>"
shortPathName(exe_path)
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
func_grp
folder_path
model_path
exe_name
burnin_time
fmax
fmin = 0
restart = 0
# Check os used.
os <- Sys.info()['sysname']
if(!os %in% c("Windows","Linux"))
stop("This package is not developped to work on iOS. Several modifications are required to copy files and directories, and run Atlantis.")
# Check if model path is the right path.
if(length(grep(exe_name, list.files(model_path))) == 0)
stop("Verify that model_path is the correct path to your calibrated model folder. If it is, verify that exe_name is the correct name of atlantis executable and that the executable is in the folder. Then run atlantisfmsy_simu again.")
# Check if physics, biology and fishery modules are activated in Atlantis.
if(atlantis_checkmodule(model_path, exe_name) == 0)
stop(paste("Please check the file ", atlantis_paraselect(model_path, exe_name, "-r"), ", at least one of the following modules is not running in the calibrated model: physics, biology or fishery.", sep = ""))
# Check if functional group on in calibrated model.
if(atlantis_fgrpon(func_grp, model_path, exe_name) == 0)
stop(paste("The functional group ", func_grp, " is turned off in the calibrated model.", sep = ""))
# Check if functional group is fished and impacted in the calibrated model.
if(atlantis_fgrpimp(func_grp, model_path, exe_name) == 0)
stop(paste("The functional group ", func_grp, " is either not fished or not impacted. If you still want to estimate the Fmsy for that functional group please modify the file ", atlantis_paraselect(model_path, exe_name, "-s"), " to turn on IsFished and IsImpacted. If you want to apply a particular distribution of the fishing pressure accross your fleets please fill the parameter mFC for that functional group with the distribution you want to apply. If you wnat to keep the F distributes uniformly accross fleets leave all the values in the vector mFC equal to 0. Then run the function atlantisfmsy_simu again.", sep = ""))
# Check if simulation folder already exist or not. If it exist and atlantisfmsy_restart wasn't use, ask to delete the folder and stop the script.
if(paste(folder_path, "AtlantisMSY", func_grp, sep = "/") %in% list.dirs(paste(folder_path, "AtlantisMSY", sep = "/"), recursive = F) & fmin == 0 & restart == 0)
stop(paste("You've already run the simulation for the functional group: ", func_grp, ". If your computer stopped during the simulation please use atlantisfmsy_restart or else remove the folder ", func_grp," from the directory AtlantisMSY and run the function atlantisfmsy_simu again.", sep = ""))
paste(folder_path, "AtlantisMSY", func_grp, sep = "/")
list.dirs(paste(folder_path, "AtlantisMSY", sep = "/"), recursive = F)
# Check if simulation folder already exist or not. If it exist and atlantisfmsy_restart wasn't use, ask to delete the folder and stop the script.
if(paste(folder_path, "AtlantisMSY", func_grp, sep = "/") %in% list.dirs(paste(folder_path, "AtlantisMSY", sep = "/"), recursive = F) & fmin == 0 & restart == 0)
stop(paste("You've already run the simulation for the functional group: ", func_grp, ". If your computer stopped during the simulation please use atlantisfmsy_restart or else remove the folder ", func_grp," from the directory AtlantisMSY and run the function atlantisfmsy_simu again.", sep = ""))
# Check if there is more than one shell/batch file in the model directory.
if(os == "Windows"){
if(length(list.files(model_path)[regexpr(".bat", list.files(model_path), fixed = T) != -1]) != 1)
stop("More than one batch file exist in the model directory. Please remove the one not used to run the model.")
} else {
if(length(list.files(model_path)[regexpr(".sh", list.files(model_path), fixed = T) != -1]) != 1)
stop("More than one shell file exist in the model directory. Please remove the one not used to run the model.")
}
# Check fleets definition in the calibrated model.
run_time <- burnin_time + (2 * 365) # burn in time + 30 extra years, average catch will be calculated on the 5 last years.
harvest_filename <- atlantis_paraselect(model_path, exe_name, "-h") #looking for harvest parameters file.
fishing_para <- atlantis_fleetopen(model_path, exe_name, harvest_filename, run_time) #check if fleets turn on.
if(sum(fishing_para$active_flt) == 0)
stop("No fleet is active in your model please change your harvest parameters file.")
fishing_para <- atlantis_checkf(model_path, harvest_filename, fishing_para) #check if model is calibrated with fishing mortality.
if(sum(fishing_para$active_flt * fishing_para$effortmodel) != 0)
stop("Your Atlantis model is not calibrated with fishing mortality (efffortmodel = 0) for open fleets.")
# Extract distribution of F amongst fleets in the calibrated model.
f_prop <- atlantis_fdistri(func_grp, model_path, harvest_filename, fishing_para)
restart == 0
simu_path <- atlantisfmsy_inisimu(func_grp, folder_path, model_path, exe_name, harvest_filename, run_time, f_prop, fmax, fmin, fishing_para)
func_grp
folder_path
model_path
exe_name
harvest_filename
run_time
f_prop
fmax
fmin
fishing_para
os
gwd_ini <- getwd()
if (fmax >= 10) stop("You need to modify the code to use F higher than or equal to 10: problem with automatization of Atlantis output names for each simulation")
#create simulation folder for functional group func_grp and copy model parameters files into the new directory.
if(fmin == 0){
simu_path <- atlantisfmsy_modelcopy(func_grp, folder_path, model_path, exe_name)
} else {
simu_path <- file.path(folder_path, "AtlantisMSY", func_grp) #if restart the simulation after computer shutdown.
}
func_grp
folder_path
model_path
exe_name
os
gwd_ini <- getwd()
#create the folder to store Fmsy simulations.
dir.create(file.path(folder_path, "AtlantisMSY"), showWarnings = FALSE)
dir.create(file.path(folder_path, paste("AtlantisMSY", func_grp, sep = "/")), showWarnings = FALSE)
#copy model files in the simulation directory.
setwd(model_path)
copy <- paste("xcopy /e /y ", shortPathName(model_path), " ", paste(shortPathName(folder_path), "AtlantisMSY", func_grp, sep = "\\"), sep = "") #copy model information.
shell(copy)
simu_path <- file.path(folder_path, "AtlantisMSY", func_grp)
gc()
simu_path
#look for forcing file if they aren't in the model directory.
forcingfile <- atlantis_paraselect(model_path, exe_name, "-f") #prm forcing file name.
forcingfile
para <- atlantis_openfile(model_path, forcingfile, ".name")
params <- para[[1]]
idxline <- para[[2]]
line_para <- params[idxline] #remove comments line.
line_para <- stringr::str_split_fixed(line_para, ".name ", 2)[, 2] #forcing file list and their associated directory.
# Develop for California Current model: Copy forcing files that are not inside the main model directory.
# WARNING: Only working if the forcing folder is in the parent directory of the main model directory.
# If not please either modify this script or modify the path structure of your Atlantis forcing files.
if(any(substring(line_para, 1, 2) == "..")){
line_para <- line_para[substring(line_para, 1, 2) == ".."] #check if forcing input files are stored outside of the main model directory.
if (os == "Windows") {
forcing_folder <- unique(stringr::str_split_fixed(line_para, "\\\\", 3)[, 2]) #forcing input files folder.
} else {
forcing_folder <- unique(stringr::str_split_fixed(line_para, "/", 3)[, 2]) #forcing input files folder.
}
#Check if forcing folder already exist in the parent directory of the simulation path. ADD A SCRIPT THAT CHECK THAT ALL THE FILES ARE PRESENT IN /AtlantisMSY/forcing_folder IN CASE OF COMPUTER CRASH DURING THE COPY OF FILES.
if (!dir.exists(file.path(folder_path, "AtlantisMSY", forcing_folder))) {
dir.create(file.path(folder_path, "AtlantisMSY", forcing_folder), showWarnings = FALSE) #create forcing folder.
forcing_path <- gsub(utils::tail(strsplit(model_path, "/")[[1]], 1), forcing_folder, model_path)
# copy content of the forcing folder into the new forcing folder used for simulation.
if (os == "Windows") {
copy <- paste("xcopy /e /y ", gsub("/", "\\\\", forcing_path), " ", paste(gsub("/", "\\\\", folder_path), "AtlantisMSY", forcing_folder, sep = "\\"), sep = "") #copy model information.
shell(copy)
} else {
copy <- paste("cp -a ", forcing_path, "/. ", paste(folder_path, "AtlantisMSY", forcing_folder, sep = "/"),"/", sep = "") #copy model information.
system(copy)
convert <- paste("cd ",paste(folder_path, "AtlantisMSY", forcing_folder, sep = "/"), "/", "\n", "flip -uv *", sep = "") #convert windows text files into Linux text files.
system(convert)
}
}
}
library(atlantisfmsy)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6342/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
getwd()
library(atlantisfmsy)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("stringr")
library("qdapRegex")
library("ncdf4")
library("utils")
library(atlantisfmsy)
folder_path <- getwd() # where you want to store output of the test (here your current working directory)
model_path <- system.file("extdata", "setas-model-new-trunk", package = "atlantisfmsy") # here SETas model from Atlantis wiki usind trunk code, to run the example for bec-dev code of Atlantis replace "setas-model-new-trunk" by "setas-model-new" or you can replace it by the directory of your calibrated model
if(Sys.info()['sysname'] == "Linux"){
convert <- paste("cd ", model_path, "/", "\n", "flip -uv *", sep = "") #convert Windows text files into Linux text files.
system(convert)
}
exe_name <- "atlantismain" #executable name might be different on Linux "atlantismainNew"
group_csv_file <- atlantis_paraselect(model_path, exe_name, "-s") # functional groups csv file from SETas model
group_csv_data <- read.table(file.path(model_path, group_csv_file), sep = ",", dec = ".", header = T) # load data from parameters file
# list of functional groups that are turn on, fished and impacted
group_list <- as.character(group_csv_data$Code[group_csv_data$IsTurnedOn == 1 & group_csv_data$IsFished == 1 & group_csv_data$IsImpacted == 1])
group_list
func_grp <- group_list[2]
burnin_time <- 7300 # in days
fmax <- 4 # per years
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_simu(func_grp, folder_path, model_path, exe_name, burnin_time, fmax)
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
func_grp
folder_path
model_path
exe_name
fmax
last_run = NULL
# Check os used.
os <- Sys.info()['sysname']
if(!os %in% c("Windows","Linux"))
stop("This script is not developped to work on iOS. Several modifications are required to copy files and directories, and run Atlantis.")
# Check if functional group on in calibrated model.
if(atlantis_fgrpon(func_grp, model_path, exe_name) == 0)
stop(paste("The functional group ", func_grp, " is turned off in the calibrated model.", sep = ""))
# test if simulations for func_grp already exist.
if(!file.path(folder_path, "AtlantisMSY", func_grp) %in% list.dirs(file.path(folder_path, "AtlantisMSY"), recursive = F))
stop(paste("You have never run this script for the functional group ", func_grp, ". Use the atlantisfmsy_simu function.", sep = ""))
# test if last_run parameter is well specified if specified.
if(!is.null(last_run)) {
test <- stringr::str_split_fixed(last_run, "_", n = 3)
if(test[1] != "MSY" | test[2] != func_grp | substring(test[3], 1, 1) != "F" | grepl("[^0-9]", substring(test[3], 2, 4)) | substring(test[3], 5, 7) != ".nc")
stop(paste(last_run, " is not well specified. It should be of the form MSY_", func_grp, "_F[1-9][1-9][1-9].nc. Please change last_run parameter to match the value in your batch/shell file or in your output folder.", sep = ""))
rm(test)
}
simu_path <- file.path(folder_path, "AtlantisMSY", func_grp)
# path forcing parameters file.
infilename <- atlantis_paraselect(simu_path, exe_name, "-r")
# Extract running time from previous run.
para <- atlantis_openfile(simu_path, infilename, "tstop")
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
run_time <- as.numeric(line_para[grep("[0-9]+", line_para)[1]])
burnin_time <- run_time - (30 * 365) # burn in time + 30 extra years, average catch will be calculated on the 5 last years.
# set run parameters file to rewrite previous unfinished simulation if already exist.
para <- atlantis_openfile(simu_path, infilename, "flagreusefile")
params <- para[[1]]
idxline <- para[[2]]
line_para <- unlist(strsplit(params[idxline], " "))
line_para <- gsub("\\t", "", line_para)
line_para[grep("[0-9]+", line_para)[1]] <- "2" # replace output files.
params[idxline] <- paste(as.character(line_para), collapse = " ")
write(params, file.path(simu_path, infilename))
# search for the output directory in bach file.
output_path <- unlist(strsplit(atlantis_paraselect(simu_path, exe_name, "-o"), "/"))
output_path <- output_path[-length(output_path)]
output_path <- paste(simu_path, output_path, sep = "/")
if(is.null(last_run)){
output_files <- atlantis_lastsimu(output_path)[[1]]
fmin <- atlantis_lastsimu(output_path)[[2]]
} else {
output_files <- atlantis_lastsimu(output_path, last_run)[[1]]
fmin <- atlantis_lastsimu(output_path, last_run)[[2]]
}
"Fnext_simu.txt" %in% output_files
restart
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
model_path
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
library(atlantisfmsy)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
exe_path <- "C:/Atlantis/code/trunk_rev6261/atlantismain/Debug/atlantismain.exe" #"<your own path>"
if(Sys.info()['sysname'] == "Windows") {
copy <- paste("xcopy ", shortPathName(exe_path), " ", shortPathName(model_path), sep = "") #copy executable.
shell(copy)
} else {
copy <- paste("cp -a ", exe_path, " ", model_path, "/", sep = "") #copy executable on UNIX.
system(copy)
}
atlantisfmsy_restart(func_grp, folder_path, model_path, exe_name, fmax)
devtools::install("atlantisfmsy")
getwd
getwd()
devtools::install()
library(atlantisfmsy)
devtools::install()
library(atlantisfmsy)
help(atlantisfmsy)
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
devtools::install(build_vignettes = TRUE)
library(atlantisfmsy)
devtools::install(build_vignettes = TRUE)
library(atlantisfmsy)
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
windows()
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
library(atlantisfmsy)
help("atlantis_checkf")
library(stringr)
install.packages("devtools")
install.packages(c("roxygen2", "testthat", "knitr"))
devtools::install_github("hadley/devtools")
library(devtools)
help(install_deps)
devtools::build(build_vignettes=T)
devtools::build()
devtools::install(dependencies = T)
devtools::install(dependencies = T, build_vignettes = T)
library(atlantisfmsy)
vignette("atlantisfmsy-demo", package = "atlantisfmsy")
search()
devtools::install(dependencies = T, build_vignettes = T)
devtools::document()
devtools::install(vignette=T)
file.exists("~/.ssh/id_rsa.pub")
